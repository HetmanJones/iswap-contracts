/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace InterestSwap {
  export type PoolStruct = {
    acceptedTokens: PromiseOrValue<string>[];
    totalLiquidity: PromiseOrValue<BigNumberish>;
    priceModel: PromiseOrValue<string>;
  };

  export type PoolStructOutput = [string[], BigNumber, string] & {
    acceptedTokens: string[];
    totalLiquidity: BigNumber;
    priceModel: string;
  };

  export type RouteStruct = {
    poolOwner: PromiseOrValue<string>;
    poolIndex: PromiseOrValue<BigNumberish>;
  };

  export type RouteStructOutput = [string, BigNumber] & {
    poolOwner: string;
    poolIndex: BigNumber;
  };
}

export interface InterestSwapInterface extends utils.Interface {
  functions: {
    "createPool(address[],address,uint256)": FunctionFragment;
    "createPriceModel(uint256)": FunctionFragment;
    "getPool(address,uint256)": FunctionFragment;
    "getUserTotalPools(address)": FunctionFragment;
    "isAssetSupported(address,uint256,address)": FunctionFragment;
    "liquidityToken()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "priceModels(uint256)": FunctionFragment;
    "quote(address,uint256,uint256,(address,uint256))": FunctionFragment;
    "swap(address,uint256,uint256,(address,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPool"
      | "createPriceModel"
      | "getPool"
      | "getUserTotalPools"
      | "isAssetSupported"
      | "liquidityToken"
      | "priceFeed"
      | "priceModels"
      | "quote"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPriceModel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalPools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetSupported",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceModels",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      InterestSwap.RouteStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      InterestSwap.RouteStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPriceModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAssetSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceModels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "PoolCreated(address,address[],address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
}

export interface PoolCreatedEventObject {
  owner: string;
  acceptedTokens: string[];
  priceModel: string;
  totalLiquidity: BigNumber;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string[], string, BigNumber],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface InterestSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterestSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPool(
      _acceptedTokens: PromiseOrValue<string>[],
      _priceModel: PromiseOrValue<string>,
      _initialLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPriceModel(
      _dailyFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[InterestSwap.PoolStructOutput]>;

    getUserTotalPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAssetSupported(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityToken(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    priceModels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quote(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    swap(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPool(
    _acceptedTokens: PromiseOrValue<string>[],
    _priceModel: PromiseOrValue<string>,
    _initialLiquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPriceModel(
    _dailyFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPool(
    _lp: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<InterestSwap.PoolStructOutput>;

  getUserTotalPools(
    _lp: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAssetSupported(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityToken(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  priceModels(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  quote(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _daysTerm: PromiseOrValue<BigNumberish>,
    route: InterestSwap.RouteStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  swap(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _daysTerm: PromiseOrValue<BigNumberish>,
    route: InterestSwap.RouteStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPool(
      _acceptedTokens: PromiseOrValue<string>[],
      _priceModel: PromiseOrValue<string>,
      _initialLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPriceModel(
      _dailyFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<InterestSwap.PoolStructOutput>;

    getUserTotalPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAssetSupported(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityToken(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    priceModels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    quote(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    swap(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "PoolCreated(address,address[],address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      acceptedTokens?: null,
      priceModel?: null,
      totalLiquidity?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      owner?: PromiseOrValue<string> | null,
      acceptedTokens?: null,
      priceModel?: null,
      totalLiquidity?: null
    ): PoolCreatedEventFilter;
  };

  estimateGas: {
    createPool(
      _acceptedTokens: PromiseOrValue<string>[],
      _priceModel: PromiseOrValue<string>,
      _initialLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPriceModel(
      _dailyFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAssetSupported(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityToken(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    priceModels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      _acceptedTokens: PromiseOrValue<string>[],
      _priceModel: PromiseOrValue<string>,
      _initialLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPriceModel(
      _dailyFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAssetSupported(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceModels(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _daysTerm: PromiseOrValue<BigNumberish>,
      route: InterestSwap.RouteStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
