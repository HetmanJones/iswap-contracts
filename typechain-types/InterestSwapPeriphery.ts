/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace InterestSwapPeriphery {
  export type TokenInfoStruct = {
    decimals: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    tokenAddress: PromiseOrValue<string>;
  };

  export type TokenInfoStructOutput = [number, string, string, string] & {
    decimals: number;
    name: string;
    symbol: string;
    tokenAddress: string;
  };

  export type PoolInfoStruct = {
    priceModel: PromiseOrValue<string>;
    liquidityToken: InterestSwapPeriphery.TokenInfoStruct;
    acceptedTokens: InterestSwapPeriphery.TokenInfoStruct[];
    totalLiquidity: PromiseOrValue<BigNumberish>;
  };

  export type PoolInfoStructOutput = [
    string,
    InterestSwapPeriphery.TokenInfoStructOutput,
    InterestSwapPeriphery.TokenInfoStructOutput[],
    BigNumber
  ] & {
    priceModel: string;
    liquidityToken: InterestSwapPeriphery.TokenInfoStructOutput;
    acceptedTokens: InterestSwapPeriphery.TokenInfoStructOutput[];
    totalLiquidity: BigNumber;
  };
}

export interface InterestSwapPeripheryInterface extends utils.Interface {
  functions: {
    "getPool(address,uint256)": FunctionFragment;
    "getPools(address)": FunctionFragment;
    "interestSwap()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getPool" | "getPools" | "interestSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestSwap",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestSwap",
    data: BytesLike
  ): Result;

  events: {};
}

export interface InterestSwapPeriphery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterestSwapPeripheryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[InterestSwapPeriphery.PoolInfoStructOutput]>;

    getPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[InterestSwapPeriphery.PoolInfoStructOutput[]]>;

    interestSwap(overrides?: CallOverrides): Promise<[string]>;
  };

  getPool(
    _lp: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<InterestSwapPeriphery.PoolInfoStructOutput>;

  getPools(
    _lp: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<InterestSwapPeriphery.PoolInfoStructOutput[]>;

  interestSwap(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<InterestSwapPeriphery.PoolInfoStructOutput>;

    getPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<InterestSwapPeriphery.PoolInfoStructOutput[]>;

    interestSwap(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestSwap(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPool(
      _lp: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
